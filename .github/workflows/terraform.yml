name: Terraform CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  # Ermöglicht das manuelle Auslösen des Workflows
  workflow_dispatch:

jobs:
  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      # Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v3

      # AWS-Anmeldedaten konfigurieren
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-central-1

      # Terraform installieren
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

        # Terraform Init mit API-Token
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

        # Ansible installieren
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Generiere Ansible Inventory
        working-directory: ./terraform
        run: |
          echo "[webserver]" >> ../ansible/inventory.ini
          cat ../ansible/inventory.ini
          terraform output -json >> meineOutputs.json
          if [ -s meineOutputs.json ]; then
          jq -r ".public_ips.value[]" meineOutputs.json >> ../ansible/inventory.ini
          cat ../ansible/inventory.ini
          else
            echo "Terraform outputs are empty or invalid."
          fi

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem

  terraform_destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: terraform_apply
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses:
          actions/checkout@v3

          # AWS-Anmeldedaten konfigurieren
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-central-1

        # Terraform installieren
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

        # Terraform Init mit API-Token
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve
