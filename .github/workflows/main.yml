name: Test-Projects
on:
  push:
    branches:
      - main

# env:
# ECS_TASK_DEFINITION: ./.aws/task-definition.json
# CONTAINER_NAME: react-app
# ECS_SERVICE: React-App-Service
# ECS_CLUSTER: React-App

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Node aktualisieren
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Abh채ngigkeiten installieren
        run: npm install

      - name: React Test ausf체hrung
        run: npm run test

  image_push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      # build job soll den build ordner als artefakt hochladen
      # schritt 1: code auschecken
      - name: Check out code
        uses: actions/checkout@v4
      # schritt 2: node installieren
      # wir probieren diesen schritt wegzulassen
      - name: Node aktualisieren
        uses: actions/setup-node@v4
        with:
          node-version: 22
      # schritt 3: abh채ngigkeiten installieren
      - name: Abh채ngigkeiten installieren
        run: npm install

      - name: Dateipfad anzeigen
        run: ls -la
      # schritt 4: Projekt-build bauen
      - name: Image erstellen
        run: docker buildx build -t --load klatschenderaffe/reactappimage .
      # schritt 5: build ergebnisse hochladen
      # Step 2: Log in to Docker Hub (if accessing private images)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: klatschenderaffe
          password: ${{ secrets.PASSWORD }}
      - name: Image pushen
        run: docker push klatschenderaffe/reactappimage

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: image_push

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  #         aws-region: eu-central-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: react-app-repo
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         # Build a docker container and
  #         # push it to ECR so that it can
  #         # be deployed to ECS.
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #         container-name: ${{ env.CONTAINER_NAME }}
  #         image: ${{ steps.build-image.outputs.image }}

  #     - name: Remove invalid fields from task definition
  #       run: |
  #         jq 'del(.enableFaultInjection)' ./.aws/task-definition.json > ./.aws/task-definition-cleaned.json
  #         mv ./.aws/task-definition-cleaned.json ./.aws/task-definition.json

  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #       with:
  #         task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #         service: ${{ env.ECS_SERVICE }}
  #         cluster: ${{ env.ECS_CLUSTER }}
  #         wait-for-service-stability: true
